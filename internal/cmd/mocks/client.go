// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cyberark/conjur-cli-go/internal/impl (interfaces: ConjurClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	conjurapi "github.com/cyberark/conjur-api-go/conjurapi"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockConjurClient is a mock of ConjurClient interface
type MockConjurClient struct {
	ctrl     *gomock.Controller
	recorder *MockConjurClientMockRecorder
}

// MockConjurClientMockRecorder is the mock recorder for MockConjurClient
type MockConjurClientMockRecorder struct {
	mock *MockConjurClient
}

// NewMockConjurClient creates a new mock instance
func NewMockConjurClient(ctrl *gomock.Controller) *MockConjurClient {
	mock := &MockConjurClient{ctrl: ctrl}
	mock.recorder = &MockConjurClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConjurClient) EXPECT() *MockConjurClientMockRecorder {
	return m.recorder
}

// AddSecret mocks base method
func (m *MockConjurClient) AddSecret(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "AddSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecret indicates an expected call of AddSecret
func (mr *MockConjurClientMockRecorder) AddSecret(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecret", reflect.TypeOf((*MockConjurClient)(nil).AddSecret), arg0, arg1)
}

// LoadPolicy mocks base method
func (m *MockConjurClient) LoadPolicy(arg0 conjurapi.PolicyMode, arg1 string, arg2 io.Reader) (*conjurapi.PolicyResponse, error) {
	ret := m.ctrl.Call(m, "LoadPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*conjurapi.PolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPolicy indicates an expected call of LoadPolicy
func (mr *MockConjurClientMockRecorder) LoadPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPolicy", reflect.TypeOf((*MockConjurClient)(nil).LoadPolicy), arg0, arg1, arg2)
}

// Resource mocks base method
func (m *MockConjurClient) Resource(arg0 string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "Resource", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resource indicates an expected call of Resource
func (mr *MockConjurClientMockRecorder) Resource(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockConjurClient)(nil).Resource), arg0)
}

// Resources mocks base method
func (m *MockConjurClient) Resources(arg0 *conjurapi.ResourceFilter) ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "Resources", arg0)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resources indicates an expected call of Resources
func (mr *MockConjurClientMockRecorder) Resources(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resources", reflect.TypeOf((*MockConjurClient)(nil).Resources), arg0)
}

// RetrieveSecret mocks base method
func (m *MockConjurClient) RetrieveSecret(arg0 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "RetrieveSecret", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveSecret indicates an expected call of RetrieveSecret
func (mr *MockConjurClientMockRecorder) RetrieveSecret(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSecret", reflect.TypeOf((*MockConjurClient)(nil).RetrieveSecret), arg0)
}
