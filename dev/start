#!/usr/bin/env bash

set -eo pipefail

# Navigate to the dev directory (where this script lives) to ensure we can run this script
# from anywhere.
cd "$(dirname "$0")"

# TODO: add a prompt and an -f flag to give the user control over destroying an already existing development environment.
# It can be such a pain to mistakenly destroy your environment.

main() {
  if docker-compose ps conjur | grep conjur >/dev/null 2>&1; then
    ./stop
  fi

  local conjur_account=dev
  local admin_initial_password='SuperSecret!!!!123'
  local path_to_admin_initial_password=tmp/admin_initial_password

  # Prepare tmp files
  echo
  echo "Preparing dev/tmp files"
  mkdir -p ./tmp
  touch ./tmp/.bashrc
  cat <<EOL > ./tmp/.bashrc
echo "Invoke dev_help to find out about the dev utilities available within this shell" >&2

function dev_help() {
  echo "
Available dev utilities
-----------------------

make: Make can be executed against the Makefile in the root directory of the repository.

      Available tasks are: run, build, install, test, integration.

admin_initial_password: Prints the initially-set password of the Conjur admin

admin_api_key: Prints the API key of the Conjur admin
"
}

function admin_initial_password() {
  cat ${PWD}/${path_to_admin_initial_password}
}

function admin_api_key() {
  curl -s 'http://conjur/dev?action=retrieve_api_key&role_id=dev:user:admin'
}

export -f admin_api_key
export -f admin_initial_password
EOL

  echo
  echo "Starting Containers"
  docker-compose up -d


  echo
  docker-compose exec -T pg bash -e <<EOL
echo 'Waiting for Postgres to be ready...'
for i in {1..90}
do
  pg_isready -U postgres 2>&1 > /dev/null && echo ' Postgres is ready!' && exit 0;
  printf '.'
  sleep 1
done

echo 'Postgres is not ready after 90 seconds'
exit 1
EOL

  echo
  docker-compose exec conjur conjurctl wait

  echo
  echo 'Setting up Conjur...'
  docker-compose exec -T conjur bundle exec rake "account:create_with_password[${conjur_account},${admin_initial_password}]"
  echo 'Finished setting up Conjur'

  echo
  echo "Admin password: ${admin_initial_password}"
  echo "${admin_initial_password}" | tr -d '\r\n' > "${path_to_admin_initial_password}"
  echo "Wrote admin password to dev/${path_to_admin_initial_password}"

  docker-compose exec cli-dev ./dev/refresh-admin-connection-details

  echo
  echo "Entering CLI container"

  docker-compose exec cli-dev go mod download || true

  echo
  docker-compose exec cli-dev bash
}

main "$@"
